import <h7>
import <proof3d>

#define LOCAL_SCOPES ON

module airport {

  facility CONCH, ID_CONCH, Q_CONCH;
  constant int NUM_PROCESSES = 4;
  constant float SHUTDOWN_TIME = 24 * 60;
  control int SHUTDOWN = 0;
  set(Box) QUEUE[NUM_PROCESSES];
  rn_stream PROCESS_STREAM, LAUNCH_STREAM;

  class StrStrHashEntry (string(*) in_key, string(*) in_val) {
    string(100) key;
    string(100) val;
    initial {
      key = in_key;
      val = in_val;
    }
  };

  class Hash {
    set(StrStrHashEntry) ranked(ascending key) dict;
    procedure st(string(*) key, string(*) val) {
      pointer(StrStrHashEntry) el;
      el = retrieve StrStrHashEntry(key=key) from dict;
      if (el == NULL) {
        el = new StrStrHashEntry(key, val);
        place el into dict;
      } else {
        el -> val = val;
      }
      return;
    }
    procedure gt(string(*) key) returning string(100) {
      pointer(StrStrHashEntry) el;
      el = retrieve StrStrHashEntry(key=key) from dict;
      return el -> val;
    }
  };

  class Box(string(*) in_color, string(*) in_size) {
    Hash options;
    int id;
    static int num_boxes;
    float arrival_time;
    string(100) mesh;
    initial {
      id = ++num_boxes;
      options.st("color", in_color);
      options.st("size", in_size);
      mesh = "MESH";
    }
  }

  class Launcher(pointer(Box) in_template_box, float in_median_creation_period) {
    pointer(Box) template_box;
    pointer(Box) clone_box;
    float median_creation_period;
    initial{
      median_creation_period = in_median_creation_period;
      template_box = in_template_box;
    }
    procedure run() {
      forever {
				seize ID_CONCH;
        clone_box = new Box(template_box -> options.gt("color"), template_box -> options.gt("size"));
				release ID_CONCH;
        PA_Create clone_box -> mesh clone_box -> id;
				PA_Place clone_box -> id on "QUEUE1";
        advance rv_expo(LAUNCH_STREAM, median_creation_period);
				if(time >= SHUTDOWN_TIME) {
					print("shutdown")"_\n";
					SHUTDOWN = 1;
					break;
				}
        seize Q_CONCH;
          place clone_box into QUEUE[1];
				release Q_CONCH;
      }
    }
    actions {
      run();
    }
  }

  class Processor(int in_processor_id, int in_process_id, string(*) in_selector,
      string(*) in_process_name, float in_median_duration) {
    int processor_id, in_q, out_q;
    float median_duration;
    string(100) process_name, selector;
    initial {
      processor_id = in_processor_id;
      in_q = in_process_id;
      out_q = in_q + 1;
      median_duration = in_median_duration;
      process_name = in_process_name;
      selector = in_selector;
    }
		procedure process(pointer(Box) box) {
			PA_Place box -> id on "PROCESSOR" cat ascii(processor_id + 48);
      advance rv_expo(PROCESS_STREAM, median_duration);
      box -> mesh = process_name cat box -> mesh;
      PA_Destroy box -> id;
      PA_Create box -> mesh box -> id;
			PA_Place box -> id on "QUEUE" cat ascii(out_q + 48);
		}
    procedure run() {
      pointer(Box) box;
      forever {
        wait until (QUEUE[in_q].size > 0);
        seize CONCH;
        for(box = each Box in QUEUE[in_q] with box -> options.gt(selector) == process_name)
          break;
        if (box == NULL) {
					advance 1;
					release CONCH;
          continue;
        } else {
          remove box from QUEUE[in_q];
          release CONCH;
        }
				PA_Place box -> id on "PROCESSOR" cat ascii(processor_id + 48);
        advance rv_expo(PROCESS_STREAM, median_duration);
        box -> mesh = process_name cat box -> mesh;
        PA_Destroy box -> id;
        PA_Create box -> mesh box -> id;
				PA_Place box -> id on "QUEUE" cat ascii(out_q + 48);
        place box into QUEUE[out_q];
      }
    }
    actions {
      run();
    }
  }

  class ProcessingUnit(int in_num_processors, string(*) options[*], int in_median_duration) {
    static int num_units;
    int id;
    string(*) options[];
    initial {
     id = ++num_units;
    }
  }

  procedure main(int argc, string(*) argv[*]) {
    PA_ATF "data_set_z/airport.atf";
    set(Launcher) launcher_set;
    set(Processor) processor_set;

    pointer(Box) b = new Box("RED", "BIG");

    //activate new Launcher(b, 60);

    //pointer(Processor) p = new Processor(1, 1, "color", "BLUE", 45);
    //place p into processor_set;
    //activate p;

    //activate new Processor(1, 1, "color", "RED", 45);
    //activate new Processor(2, 2, "size", "SML", 30);
    //activate new Processor(2, 2, "size", "BIG", 30);
    //wait until (SHUTDOWN == 1);
		//print("end")"_\n";
  }
}
